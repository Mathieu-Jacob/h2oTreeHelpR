% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/encode_terminal_nodes.R
\name{encode_terminal_nodes}
\alias{encode_terminal_nodes}
\title{Encode input data as terminal nodes in tree based model.}
\usage{
encode_terminal_nodes(data, terminal_node_split_rules, h2o_trees_in_R,
  return_one_hot = TRUE)
}
\arguments{
\item{data}{input data to encode as terminal nodes from trees. Currently only
\code{data.frame} inputs are supported.}

\item{terminal_node_split_rules}{\code{list} of splitting rules for terminal
nodes in each tree, the output from \code{extract_split_rules} function.}

\item{h2o_trees_in_R}{\code{list} of trees output from
\code{H2OTreeConvertR::h2o_tree_convertR} function.}
}
\value{
terminal node encoding for input data. Currently only
\code{data.frame} input data is supported.
}
\description{
Encode input data as terminal nodes in tree based model.
}
\examples{
library(h2o)

h2o.init()

prostate.hex = h2o.uploadFile(path = system.file("extdata",
                                                 "prostate.csv",
                                                 package = "h2o"),
                              destination_frame = "prostate.hex")

prostate.hex$RACE <- as.factor(prostate.hex$RACE)

prostate.hex$DPROS <- as.factor(prostate.hex$DPROS)

prostate.gbm = h2o.gbm(x = c("AGE", "RACE", "DPROS", "DCAPS", "PSA", "VOL", "GLEASON"),
                       y = "CAPSULE",
                       training_frame = prostate.hex,
                       ntrees = 5,
                       max_depth = 5,
                       learn_rate = 0.1)

h2o_trees <- H2OTreeConvertR::h2o_tree_convertR(prostate.gbm)

h2o_trees_terminal_node_rules <- extract_split_rules(h2o_trees)

terminal_node_encoding <- encode_terminal_nodes(data = prostate_df,
                                                terminal_node_split_rules = h2o_trees_terminal_node_rules,
                                                h2o_trees_in_R = h2o_trees)

}
